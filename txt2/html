<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Gboard Editor</title>
<style>
:root {
  --primary: #4f8cff;
  --bg: #f5f7fa;
  --card: #fff;
  --shadow: 0 4px 24px rgba(79,140,255,0.08);
  --radius: 18px;
  --input-bg: #f0f3f7;
  --input-focus: #e3e9f7;
  --border: #e3e9f7;
  --highlight: #fff7cc;
  --highlight-text: #bfa31d;
}
*, *::before, *::after { box-sizing: border-box; }
body {
  margin:0; padding:0; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background:var(--bg); color:#222; min-height:100vh;
  display:flex; justify-content:center; align-items:flex-start;
}
.container {
  width:100%; max-width:480px; background:var(--card);
  border-radius:var(--radius); padding:24px 16px; margin:32px 0;
  box-shadow:var(--shadow); display:flex; flex-direction:column; gap:22px;
}
h2 { margin:0 0 10px; font-weight:700; color:var(--primary); text-align:center; font-size:2rem; }
h3 { margin:18px 0 8px; color:#222; font-size:1.1rem; font-weight:600; }
input[type="file"] {
  padding:12px 16px; font-size:16px; cursor:pointer; width:100%;
  border:none; border-radius:var(--radius); background:var(--input-bg);
  box-shadow:0 2px 8px rgba(79,140,255,0.04);
  transition:background 0.2s;
}
input[type="file"]:hover { background:var(--input-focus);}
textarea, input[type="text"] {
  width:100%; font-family:monospace; font-size:15px;
  padding:14px 16px; border-radius:var(--radius); border:1px solid var(--border);
  background:var(--input-bg); margin-bottom:8px; transition:box-shadow 0.2s;
}
textarea:focus, input[type="text"]:focus {
  outline:none; background:var(--input-focus); box-shadow:0 0 0 2px var(--primary)22;
}
textarea { min-height:120px; resize:vertical; }
.undo-redo-reset, .actions, .input-group {
  display:flex; gap:10px; flex-wrap:wrap; justify-content:center; margin-bottom:4px;
}
.btn {
  padding:10px 18px; font-size:15px; font-weight:600;
  background:var(--primary); color:#fff; cursor:pointer; user-select:none;
  border:none; border-radius:var(--radius); box-shadow:0 2px 8px rgba(79,140,255,0.08);
  transition:background 0.2s, box-shadow 0.2s;
}
.btn:hover { background:#2563eb; }
.input-group input[type="text"] { max-width:180px; }
.input-group button.btn { min-width:90px; }
#preview {
  min-height:120px; font-family:monospace; font-size:15px;
  padding:16px 12px; border-radius:var(--radius); background:var(--input-bg);
  box-shadow:0 2px 8px rgba(79,140,255,0.04); white-space:nowrap;
  overflow-y:auto; max-height:220px; color:#222; margin-bottom:8px;
}
#preview div {
  display:flex; align-items:center; gap:18px; padding:4px 0;
  border-radius:8px; transition:background 0.2s;
}
#preview div.selected { background:#e3f0ff; }
#preview .highlight { background:var(--highlight); color:var(--highlight-text); font-weight:700; }
#preview .shortcut {
  display:inline-block; min-width:90px; font-weight:600; font-family:monospace;
  padding-right:12px;
}
#preview .value { flex:1; }
#stats { font-size:0.95rem; color:#444; margin-bottom:6px; text-align:right;}
@media (max-width:600px){
  .container { max-width:100vw; padding:12px 4px; margin:0; border-radius:12px;}
  h2 { font-size:1.3rem;}
  textarea, input[type="text"] { font-size:14px; padding:10px 8px;}
  #preview { font-size:13px; padding:10px 6px; max-height:140px;}
  .btn { font-size:13px; padding:8px 12px;}
  .input-group input[type="text"] { max-width:100px;}
}
::-webkit-scrollbar { width:6px; background:var(--input-bg);}
::-webkit-scrollbar-thumb { background:#d1d9e6; border-radius:6px;}
</style>
</head>
<body>
<div class="container">
  <h2>üìÇ Gboard Dictionary Editor</h2>
  <input type="file" id="fileInput" accept=".txt,.zip" />
  <textarea id="textArea" placeholder="Your file content will appear here..."></textarea>

  <div class="undo-redo-reset">
    <button class="btn" id="undoBtn">‚Ü© Undo</button>
    <button class="btn" id="redoBtn">‚Ü™ Redo</button>
    <button class="btn" onclick="resetText()">üßπ Reset</button>
    <button class="btn" onclick="refreshPage()">üîÑ Refresh</button>
  </div>

  <div class="actions">
    <button class="btn" onclick="sortLines()">üî§ Sort</button>
    <button class="btn" onclick="removeEmptyLines()">üßΩ Remove Spa</button>
    <button class="btn" onclick="removeDuplicates()">üóÉÔ∏è Remove Dup</button>
    <button class="btn" onclick="downloadFile()">‚¨á Download TXT</button>
    <button class="btn" onclick="downloadZip()">‚¨á Download ZIP</button>
  </div>

  <div class="input-group">
    <input type="text" id="shortcutInput" placeholder="Shortcut" list="shortcutSuggestions" />
    <input type="text" id="valueInput" placeholder="Value" list="valueSuggestions" />
    <button class="btn" onclick="addEntry()">‚ûï Add</button>
  </div>

  <div class="input-group">
    <input type="text" id="shortcutFilter" placeholder="üîç Shortcut..." list="shortcutSuggestions" />
    <input type="text" id="valueFilter" placeholder="üîç Value..." list="valueSuggestions" />
  </div>

  <button class="btn" onclick="clearFilters()">‚ùå Clear Filters</button>

  <h3>üìù Final Preview</h3>
  <div id="preview"></div>
  <div id="stats"></div>

  <datalist id="shortcutSuggestions"></datalist>
  <datalist id="valueSuggestions"></datalist>

  <div class="input-group">
    <input type="text" id="editShortcut" placeholder="Edit Shortcut">
    <input type="text" id="editValue" placeholder="Edit Value">
    <button class="btn" id="applyEditBtn">Apply Edit</button>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
<script>
// ===== Variables =====
const fileInput = document.getElementById('fileInput');
const textArea = document.getElementById('textArea');
const preview = document.getElementById('preview');
const shortcutInput = document.getElementById('shortcutInput');
const valueInput = document.getElementById('valueInput');
const undoBtn = document.getElementById('undoBtn');
const redoBtn = document.getElementById('redoBtn');
const shortcutFilter = document.getElementById('shortcutFilter');
const valueFilter = document.getElementById('valueFilter');
const editShortcut = document.getElementById('editShortcut');
const editValue = document.getElementById('editValue');
const applyEditBtn = document.getElementById('applyEditBtn');
const stats = document.getElementById('stats');

let history=[], historyIndex=-1, isUndoRedoAction=false;
let filteredLines=[], selectedIndex=-1;

// ===== History =====
function saveHistory(){ if(isUndoRedoAction)return; if(historyIndex<history.length-1)history=history.slice(0,historyIndex+1); history.push(textArea.value); historyIndex++; if(history.length>50){history.shift(); historyIndex--;} updateUndoRedoButtons(); }
function updateUndoRedoButtons(){ undoBtn.disabled=historyIndex<=0; redoBtn.disabled=historyIndex>=history.length-1; }
function undo(){ if(historyIndex>0){ isUndoRedoAction=true; textArea.value=history[--historyIndex]; updatePreview(); isUndoRedoAction=false; updateUndoRedoButtons(); }}
function redo(){ if(historyIndex<history.length-1){ isUndoRedoAction=true; textArea.value=history[++historyIndex]; updatePreview(); isUndoRedoAction=false; updateUndoRedoButtons(); }}

// ===== Escape =====
function escapeHtml(text){ return text.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;'); }

// ===== Preview =====
function updatePreview(){
  const lines = textArea.value.split('\n');
  const counts = {};
  lines.forEach(line=>{ const sc=line.split('\t')[0]; if(sc) counts[sc]=(counts[sc]||0)+1; });

  const sFilter = shortcutFilter.value.toLowerCase();
  const vFilter = valueFilter.value.toLowerCase();
  filteredLines = lines.filter(line=>{ const parts = line.split('\t'); return (parts[0]?.toLowerCase().includes(sFilter) && parts[1]?.toLowerCase().includes(vFilter)); });

  // Find max shortcut length for alignment
  const maxShortcutLen = Math.max(...filteredLines.map(l => (l.split('\t')[0]||'').length), 6);

  preview.innerHTML = filteredLines.map((line,i)=>{ 
    const parts = line.split('\t');
    const sc = parts[0]||'';
    const val = parts[1]||'';
    const isDup = counts[sc]>1;
    const isSelected = i===selectedIndex;
    return `<div class="${isSelected?'selected':''} ${isDup?'highlight':''}">
      <span class="shortcut">${escapeHtml(sc)}</span>
      <span class="value">${escapeHtml(val)}</span>
    </div>`;
  }).join('');

  let dup=0; for(let k in counts) if(counts[k]>1) dup+=counts[k]-1;
  stats.textContent=`Total Lines: ${lines.length} | Duplicate Shortcuts: ${dup}`;

  updateEditableFields();
}

// ===== Suggestions =====
function updateSuggestions(){
  const lines = textArea.value.split('\n');
  const sSet = new Set(), vSet = new Set();
  lines.forEach(line=>{ const p=line.split('\t'); if(p[0]) sSet.add(p[0].trim()); if(p[1]) vSet.add(p[1].trim()); });
  const shortcutList=document.getElementById('shortcutSuggestions');
  const valueList=document.getElementById('valueSuggestions');
  shortcutList.innerHTML=''; valueList.innerHTML='';
  Array.from(sSet).sort().forEach(s=>{ const opt=document.createElement('option'); opt.value=s; shortcutList.appendChild(opt); });
  Array.from(vSet).sort().forEach(v=>{ const opt=document.createElement('option'); opt.value=v; valueList.appendChild(opt); });
}

// ===== File Upload =====
fileInput.addEventListener('change',()=>{ 
  const file=fileInput.files[0]; 
  if(!file) return; 
  const reader=new FileReader();

  if(file.name.endsWith('.txt')){
      reader.onload=e=>{ textArea.value=e.target.result; updatePreview(); saveHistory(); updateSuggestions(); };
      reader.readAsText(file);
  } else if(file.name.endsWith('.zip')){
      reader.onload = e => {
          JSZip.loadAsync(e.target.result).then(zip => {
              const dictFile = zip.file(/dictionary\.txt$/i);
              if(dictFile && dictFile.length > 0){
                  dictFile[0].async("string").then(content => {
                      textArea.value = content;
                      updatePreview(); saveHistory(); updateSuggestions();
                  });
              } else { alert("Zip file-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá dictionary.txt ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!"); }
          });
      };
      reader.readAsArrayBuffer(file);
  }
});

// ===== Actions =====
function resetText(){ textArea.value=''; updatePreview(); shortcutInput.value=valueInput.value=''; shortcutInput.focus(); }
function refreshPage(){ location.reload(); }
function removeEmptyLines(){ textArea.value=textArea.value.split('\n').filter(l=>l.trim()!=='').join('\n'); updatePreview(); saveHistory(); updateSuggestions(); }
function removeDuplicates(){ const seen=new Set(); textArea.value=textArea.value.split('\n').filter(l=>{ const sc=l.split('\t')[0]; if(seen.has(sc)) return false; seen.add(sc); return true; }).join('\n'); updatePreview(); saveHistory(); updateSuggestions(); }
function sortLines(){ const lines=textArea.value.split('\n'); const comments=lines.filter(l=>l.trim().startsWith('#')); const normal=lines.filter(l=>!l.trim().startsWith('#')); normal.sort((a,b)=>a.localeCompare(b)); textArea.value=[...comments,...normal].join('\n'); updatePreview(); saveHistory(); updateSuggestions(); }
function addEntry(){ const sc=shortcutInput.value.trim(); const val=valueInput.value.trim(); if(!sc||!val) return alert('Please enter both shortcut and value.'); textArea.value+=(textArea.value?'\n':'')+`${sc}\t${val}\ten-US\t`; shortcutInput.value=valueInput.value=''; updatePreview(); saveHistory(); updateSuggestions(); shortcutInput.focus(); }
function downloadFile(){ const blob=new Blob([textArea.value],{type:'text/plain'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='edited_document.txt'; a.click(); URL.revokeObjectURL(url); }
function downloadZip(){ const zip = new JSZip(); zip.file("dictionary.txt", textArea.value); zip.generateAsync({type:"blob"}).then(function(content){ const a=document.createElement('a'); a.href=URL.createObjectURL(content); a.download="edited_document.zip"; a.click(); }); }

// ===== Filters =====
shortcutFilter.addEventListener('input',()=>{ selectedIndex=-1; updatePreview(); updateSuggestions(); });
valueFilter.addEventListener('input',()=>{ selectedIndex=-1; updatePreview(); updateSuggestions(); });
function clearFilters(){ shortcutFilter.value=valueFilter.value=''; selectedIndex=-1; updatePreview(); updateSuggestions(); }

// ===== Editable Fields =====
function updateEditableFields(){
  if(selectedIndex>=0 && filteredLines[selectedIndex]){
    const parts=filteredLines[selectedIndex].split('\t');
    editShortcut.value=parts[0]||'';
    editValue.value=parts[1]||'';
    // const child=preview.children[selectedIndex];
    // if(child) child.scrollIntoView({behavior:'smooth',block:'center'});
  } else { editShortcut.value=''; editValue.value=''; }
}
applyEditBtn.addEventListener('click',()=>{
  if(selectedIndex<0) return;
  const lines=textArea.value.split('\n');
  const targetLine=filteredLines[selectedIndex];
  const indexInAll=lines.indexOf(targetLine);
  if(indexInAll<0) return;
  lines[indexInAll]=`${editShortcut.value}\t${editValue.value}\ten-US\t`;
  textArea.value=lines.join('\n');
  updatePreview(); saveHistory(); updateSuggestions();
});
editShortcut.addEventListener('keydown',function(e){ if(e.key==='Enter'){ e.preventDefault(); applyEditBtn.click(); }});
editValue.addEventListener('keydown',function(e){ if(e.key==='Enter'){ e.preventDefault(); applyEditBtn.click(); }});

// ===== Textarea Sync =====
function updateEditableFromTextarea(){
  const cursorPos=textArea.selectionStart;
  const lines=textArea.value.split('\n'); let cumulative=0, lineIndex=0;
  for(let i=0;i<lines.length;i++){ cumulative+=lines[i].length+1; if(cursorPos<=cumulative){ lineIndex=i; break; } }
  const line=lines[lineIndex];
  const fi=filteredLines.indexOf(line);
  if(fi>=0) selectedIndex=fi;
  else selectedIndex=-1;
  updatePreview();
  updateEditableFields();
}
textArea.addEventListener('click',updateEditableFromTextarea);
textArea.addEventListener('keyup',updateEditableFromTextarea);

// ===== Preview Click =====
preview.addEventListener('click',e=>{
  const div = e.target.closest('div');
  const index = Array.from(preview.children).indexOf(div);
  if(index>=0){ selectedIndex=index; updatePreview(); updateEditableFields(); }
});

// ===== Arrow Navigation =====
window.addEventListener('keydown',e=>{
  if(e.key==='ArrowDown' && filteredLines.length>0){ e.preventDefault(); selectedIndex=Math.min(selectedIndex+1,filteredLines.length-1); updatePreview(); }
  if(e.key==='ArrowUp' && filteredLines.length>0){ e.preventDefault(); selectedIndex=Math.max(selectedIndex-1,0); updatePreview(); }
});

// ===== Undo/Redo Shortcuts =====
window.addEventListener('keydown',e=>{
  if(e.ctrlKey && !e.shiftKey && e.key==='z'){ e.preventDefault(); undo(); }
  else if((e.ctrlKey && e.key==='y')||(e.ctrlKey && e.shiftKey && e.key==='Z')){ e.preventDefault(); redo(); }
});

// ===== Initialize =====
updatePreview(); updateSuggestions();
</script>
</body>
</html>
